+ www.pythontutor.com
* data type
  - 7 // 4 = 1 : 나눈 값의 몫
  - 7%4=3 : 나머지
  - 2 ** 3 : 2의 3승

  - 문자
   - ''Phytho's food is perl' : 따옴표 또는 작은 따옴표 두~세개 가능. 이유) 문장 안에 다른 따옴표 사용 시 구분
     다른 방법 : 'Phytho\'s food is perl' : 백슬러시 사용
   - \n : 줄바꿈
  - """     """ : 안에 줄바꿈 있어도 오류 없음.
  - 문자열 * 숫자 : 숫자만큼 문자열을 반복 출력
  - 문자열 index 가능 : a[3] .. a[-2] : 뒤로부터 문자
  - slicing : a[   (이상)  : (미만)  : (index 간격)  ]
     ` ex) a = 'Life is good!'
           a[1:4] : ife
           a[1:4:2] : ie
  - list : 배열
     ` append :추가
    ` insert : 특정 인덱스에 추가
  - tuple : 고정 값 데이타 , 데이타 수정 안됨
    s = [1,2,3,4]  일반 수정 가능
    s = (1,2,3,4) tuple 수정 안됨
  - dictionary : JSON or hash
    : key와 value 쌍으로 이루어진 데이타

  - 집합 : 교집합 가능, 중복 안됨
    ` s1 = set([1,2,3]) or s2 = {1,2,3}
    ` 집합으로 바꾸기
       k= [1,2,2,3,3,4]
       newList = list(set(k)) :중복 사라짐
    ` 교집합 : s1 & s2 -> 중복된 데이타만 출력 

  - bool : True, False
    ` 비어있는 데이타는 항상  return 'False' : 0, None
    ` 데이타가 들어있으면 return 'True' : 1
  - 주소 알아보기
    print(id(a))
  - 비교
    (a is b) : a가 b이냐?
  - 복사와 list 주소 넘김의 차이
     a=[1,2,4]
     b=[:] : 처음 ~ 끝
     c=a
     a[1]=3
     <result>
     a=[1,3,4]
     b=[1,2,3]
     c=[1,3,4]

  - 특이1
    a,b=('tt','ss')  : (a,b)=('tt','ss')
    a=tt
    b=ss
  - 특이2
    a=3
    b=4
    a,b=b,a -> tmp=a  a=b  b=tmp
   

*조건문
  - 특이1
    tab으로 구분 '{' 없음
    들여쓰기 조건문 실행 범위 구분
  - if True:
	print("OK")
    else:
  - or, and, &, in, not
    ` if 4 in [1,2,3,4]
  - pass : 아무 실행 안함
     if True:
	pass
     else
  - if , elif, else
  - 특이2
    if score >=60:
	message = "success"
    else:
	message = "fail"
    print(message)

    ` message = "success" if score>=60 else "fail" : 일종의 3한 연산자 A?B:C : A 가 옳으면 B 실행 틀리면 C 실행
      print(message)
 - function
    reult=0
    def add(num)
	global result
	result += num
	return result
  -특이
    pass : 아무것도 안함. 
  - Class : 반복되는 함수나 메소드를 미리 설계 틀로 만들어 놓음
    ` Class 이름의 첫글자는 반드시 대문자
    ' 반드시 추가 부분
	class Calculator:
		def __init__(self);
			self.result=0

    ` 메소드 : class 안에 정의된 함수
	class FourCal:
		def __init__(self, first, second);
			self.first = first
			self.second=second
		def setdata(self, first, second) # 메소드
			self.first = first
			self.second=second
		def div(self)
			result = self.first / self.second
      	# 메소드 상용 방법
	a=FourCal()
	a.setdata(1,2) # a. : self의미, 1:first, 2:second
	print(a.first)
	print(a.second)

  - 상속 : 이미 만들어 놓은 class를 활용하여 다른 class를 만듦
    ' 만드는 방법
	class MoreFourCal(FourCal): -> FourCal 은 이미 있는 class임. 괄호 안에 상속 받을 class명을 넣으면 됨.
		def div(self)  ->부모 class와같은 이름의 메소드는 자식 메소드가 우선한다. : 메소드 오버라이딩
			if self.first == 0:
				return 0
			else:
				return self.first / self.second
	
    '부모 class의 기능을 모두 사용 할 수 있음
  - 클래스변수와 객체 변수
    ' 객체변수 -> 
	class FourCal:
		def __init__(self, first, second);
			self.first = first
			self.second=second

